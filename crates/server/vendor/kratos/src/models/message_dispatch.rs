/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: 
 * Contact: office@ory.sh
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MessageDispatch : MessageDispatch represents an attempt of sending a courier message It contains the status of the attempt (failed or successful) and the error if any occured
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MessageDispatch {
    /// CreatedAt is a helper struct field for gobuffalo.pop.
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<serde_json::Value>,
    /// The ID of this message dispatch
    #[serde(rename = "id")]
    pub id: String,
    /// The ID of the message being dispatched
    #[serde(rename = "message_id")]
    pub message_id: String,
    /// The status of this dispatch Either \"failed\" or \"success\" failed CourierMessageDispatchStatusFailed success CourierMessageDispatchStatusSuccess
    #[serde(rename = "status")]
    pub status: Status,
    /// UpdatedAt is a helper struct field for gobuffalo.pop.
    #[serde(rename = "updated_at")]
    pub updated_at: String,
}

impl MessageDispatch {
    /// MessageDispatch represents an attempt of sending a courier message It contains the status of the attempt (failed or successful) and the error if any occured
    pub fn new(created_at: String, id: String, message_id: String, status: Status, updated_at: String) -> MessageDispatch {
        MessageDispatch {
            created_at,
            error: None,
            id,
            message_id,
            status,
            updated_at,
        }
    }
}
/// The status of this dispatch Either \"failed\" or \"success\" failed CourierMessageDispatchStatusFailed success CourierMessageDispatchStatusSuccess
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "success")]
    Success,
}

impl Default for Status {
    fn default() -> Status {
        Self::Failed
    }
}

