/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more.
 *
 * The version of the OpenAPI document:
 * Contact: office@ory.sh
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ContinueWithSetOrySessionToken : Indicates that a session was issued, and the application should use this token for authenticated requests
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContinueWithSetOrySessionToken {
    /// Token is the token of the session
    #[serde(rename = "ory_session_token")]
    pub ory_session_token: String,
}

impl ContinueWithSetOrySessionToken {
    /// Indicates that a session was issued, and the application should use this token for authenticated requests
    pub fn new(ory_session_token: String) -> ContinueWithSetOrySessionToken {
        ContinueWithSetOrySessionToken { ory_session_token }
    }
}
/// Action will always be `set_ory_session_token` set_ory_session_token ContinueWithActionSetOrySessionTokenString
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "set_ory_session_token")]
    SetOrySessionToken,
}

impl Default for Action {
    fn default() -> Action {
        Self::SetOrySessionToken
    }
}
