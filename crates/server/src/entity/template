with this create table statement:

```sql
CREATE TABLE placeholder (
    id BLOB PRIMARY KEY NOT NULL
) WITHOUT ROWID,
STRICT;
```

and this implementation:

```rust
use anyhow::Result;
use rusqlite::{params, OptionalExtension, Transaction};
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
use uuid::Uuid;

pub struct [Placeholder] {
    id: Uuid,
}

impl Placeholder {
    /// Creates a new `Placeholder` instance.
    pub fn new(id: Uuid) -> Self {
        Self { id }
    }

    /// Inserts or updates the `Placeholder` in the database.
    pub fn upsert(&self, txn: &Transaction) -> Result<&Self> {
        let mut stmt = txn.prepare_cached("INSERT OR REPLACE INTO [placeholder] (id) VALUES ($1);")?;

        stmt.execute(params![&self.id])?;

        Ok(self)
    }

    /// Retrieves a `Placeholder` by its identifier.
    pub fn retrieve(txn: &Transaction, id: &str) -> Result<Option<Self>> {
        let mut stmt = txn.prepare_cached("SELECT id FROM [placeholder] WHERE id = $1;")?;

        Ok(stmt.query_row(params![id], |row| row.try_into()).optional()?)
    }

    /// Retrieves all `Placeholder` records.
    pub fn retrieve_all(txn: &Transaction) -> Result<Vec<Self>> {
        let mut stmt = txn.prepare_cached("SELECT id FROM [placeholder]")?;

        let mapped = stmt.query_map([], |row| row.try_into())?;

        Ok(mapped.collect::<rusqlite::Result<Vec<_>>>()?)
    }
}

impl TryFrom<&rusqlite::Row<'_>> for User {
    type Error = rusqlite::Error;

    fn try_from(row: &rusqlite::Row<'_>) -> Result<Self, Self::Error> {
        Ok(Self { id: row.get(0)? })
    }
}

#[cfg(test)]
pub mod test {
    use crate::test::{Fixture, TestContext};

    use super::*;
    use std::path::Path;

    pub struct [Placeholders];
    impl Fixture for [Placeholders] {
        fn try_fixtures(&self, txn: &Transaction) -> Result<()> {
            ["fixtures/[placeholders].json"]
                .into_iter()
                .map(|path| {
                    Ok(serde_json::from_str::<Vec<[Placeholders]>>(
                        &std::fs::read_to_string(Path::new(path))?,
                    )?)
                })
                .collect::<Result<Vec<_>>>()?
                .iter()
                .flatten()
                .map(|entity| Ok(entity.upsert(txn)?))
                .collect::<Result<Vec<_>>>()?;

            Ok(())
        }
    }

    #[tokio::test]
    async fn test_upsert_retrieve() -> Result<()> {
        let context = TestContext::new(vec![]).await?;

        let entity = [Placeholder] {
            id: Uuid::new_v4(),
        };

        let entity_move = entity.clone();
        context
            .database()
            .write(move |connection| {
                let txn = connection.transaction()?;
                entity_move.upsert(&txn)?;
                Ok(txn.commit()?)
            })
            .await?;

        let entity_move = entity.clone();
        let retrieved_entity = context
            .database()
            .read(move |connection| {
                let txn = connection.transaction()?;
                Ok([Placeholder]::retrieve(&txn, &entity_move.id)?)
            })
            .await?
            .unwrap();

        assert_eq!(retrieved_entity, entity);

        Ok(())
    }
}
```

based on the prior code, produce rust code for the struct, the implenetation and a single create table sql statement in full for the following data structure. if known add docstrings to the fields in the struct. return only the code samples and no additional words.

```rust
Attribute	Type	Description
Name	string	A Pascal-cased name representing the breach which is unique across all other breaches. This value never changes and may be used to name dependent assets (such as images) but should not be shown directly to end users (see the "Title" attribute instead).
Title	string	A descriptive title for the breach suitable for displaying to end users. It's unique across all breaches but individual values may change in the future (i.e. if another breach occurs against an organisation already in the system). If a stable value is required to reference the breach, refer to the "Name" attribute instead.
Domain	string	The domain of the primary website the breach occurred on. This may be used for identifying other assets external systems may have for the site.
BreachDate	date	The date (with no time) the breach originally occurred on in ISO 8601 format. This is not always accurate â€” frequently breaches are discovered and reported long after the original incident. Use this attribute as a guide only.
AddedDate	datetime	The date and time (precision to the minute) the breach was added to the system in ISO 8601 format.
ModifiedDate	datetime	The date and time (precision to the minute) the breach was modified in ISO 8601 format. This will only differ from the AddedDate attribute if other attributes represented here are changed or data in the breach itself is changed (i.e. additional data is identified and loaded). It is always either equal to or greater then the AddedDate attribute, never less than.
PwnCount	integer	The total number of accounts loaded into the system. This is usually less than the total number reported by the media due to duplication or other data integrity issues in the source data.
Description	string	Contains an overview of the breach represented in HTML markup. The description may include markup such as emphasis and strong tags as well as hyperlinks.
DataClasses	string[]	This attribute describes the nature of the data compromised in the breach and contains an alphabetically ordered string array of impacted data classes.
IsVerified	boolean	Indicates that the breach is considered unverified. An unverified breach may not have been hacked from the indicated website. An unverified breach is still loaded into HIBP when there's sufficient confidence that a significant portion of the data is legitimate.
IsFabricated	boolean	Indicates that the breach is considered fabricated. A fabricated breach is unlikely to have been hacked from the indicated website and usually contains a large amount of manufactured data. However, it still contains legitimate email addresses and asserts that the account owners were compromised in the alleged breach.
IsSensitive	boolean	Indicates if the breach is considered sensitive. The public API will not return any accounts for a breach flagged as sensitive.
IsRetired	boolean	Indicates if the breach has been retired. This data has been permanently removed and will not be returned by the API.
IsSpamList	boolean	Indicates if the breach is considered a spam list. This flag has no impact on any other attributes but it means that the data has not come as a result of a security compromise.
IsMalware	boolean	Indicates if the breach is sourced from malware. This flag has no impact on any other attributes, it merely flags that the data was sourced from a malware campaign rather than a security compromise of an online service.
IsSubscriptionFree	boolean	Indicates if the breach is subscription free. This flag has no impact on any other attributes, it is only used when running a domain search where a sufficiently sized subscription isn't present.
LogoPath	string	A URI that specifies where a logo for the breached service can be found. Logos are always in PNG format.
```
